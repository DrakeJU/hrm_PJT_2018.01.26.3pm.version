<!--?xml version="1.0" encoding="UTF-8"? -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 휴가 sql -->
<mapper namespace="vacation">
	

	<!-- 휴가일수설정 사원 리스트 출력 -->
	<select id="vacationCountEmpList" parameterType="HashMap" resultType="HashMap">
		/* vacationCount Employee Select (휴가개수설정 사원 리스트 출력) */
		SELECT
			(SELECT CASE WHEN RET.RETR_DEL_YN='N' THEN '재직' ELSE '퇴직' END) AS retrDelYn,
			E.EMP_EMNO AS empEmno,
			E.EMP_NAME AS empName,
			D.DEPT_NAME AS deptName,
			R.RANK_NAME AS rankName,
			(SELECT CONCAT(
				(SELECT LEFT(E.EMP_INCO_DATE,4)),
				'-',
				(SELECT SUBSTRING(E.EMP_INCO_DATE,5,2)),
				'-',
				(SELECT RIGHT(E.EMP_INCO_DATE,2))
			)) AS retrIncoDate
		FROM
			EMPLOYEE_REMINDING_VAC V
		RIGHT OUTER JOIN
			EMPLOYEE E
		ON V.EMP_EMNO = E.EMP_EMNO
		INNER JOIN
			DEPARTMENT D
		ON D.DEPT_CODE = E.DEPT_CODE
		INNER JOIN
			RANK R
		ON R.RANK_CODE = E.RANK_CODE
		INNER JOIN
			RETIREMENT RET
		ON RET.EMP_EMNO = E.EMP_EMNO
		WHERE (SELECT V.EMP_EMNO WHERE BASE_YEAR=#{baseYear}) IS NOT NULL
		<if test='retrDelYn == "off"'> #default
		AND RET.RETR_DEL_YN = 'N'
		</if>
		<if test="seacrchOption == 'empEmno' and keyword != null and !keyword.equals('')">
		AND E.EMP_EMNO LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="seacrchOption == 'empName' and keyword != null and !keyword.equals('')">
		AND E.EMP_NAME LIKE CONCAT('%',#{keyword},'%')
		</if>
		<if test="seacrchOption == 'deptName' and keyword != null and !keyword.equals('')">
		AND D.DEPT_NAME LIKE CONCAT('%',#{keyword},'%')
		</if>

	</select>
	
	<!-- 휴가일수설정 사원등록 개수 -->
	<select id="vacationCountEmpSignUpCntNum" resultType="java.lang.Integer">
	SELECT
		COUNT(IF((SELECT IF((SELECT E.EMP_EMNO WHERE(SELECT V.EMP_EMNO WHERE BASE_YEAR='2018') IS NULL),'','완료'))='완료', NULL, 1)) AS EmpSignUpCntNum
	FROM
		EMPLOYEE_REMINDING_VAC V
	RIGHT OUTER JOIN
		EMPLOYEE E
	ON V.EMP_EMNO = E.EMP_EMNO
	INNER JOIN
		RETIREMENT RET
	ON RET.EMP_EMNO = E.EMP_EMNO
	WHERE /* 재직자이거나, baseYear에 퇴직한 사람*/
		RET.RETR_DEL_YN = 'N' OR (CONVERT((SELECT LEFT(RET.RETR_DATE,4)), UNSIGNED)) = (CONVERT('2018', UNSIGNED))
	</select>
	
	<!-- 휴가일수설정 사원등록 사원리스트 출력 -->
	<select id="vacationCountEmpSignUpList" parameterType="HashMap" resultType="HashMap">
	/* 휴가일수설정 사원등록 사원리스트 출력 */
	SELECT
		E.EMP_EMNO AS empEmno,
		E.EMP_NAME AS empName,
		D.DEPT_NAME AS deptName,
		R.RANK_NAME AS rankName,
		(SELECT CONCAT(
	 		(SELECT
			 	LEFT(E.EMP_INCO_DATE,4)), 
	 			'-', 
	 			(SELECT SUBSTRING(E.EMP_INCO_DATE,5,2)), 
	 			'-', 
	 			(SELECT RIGHT(E.EMP_INCO_DATE,2))
	 		)
		) AS retrIncoDate,
		(SELECT IF((SELECT E.EMP_EMNO WHERE(SELECT V.EMP_EMNO WHERE BASE_YEAR=#{baseYear}) IS NULL),'','완료')) AS YN
	FROM
		EMPLOYEE_REMINDING_VAC V
	RIGHT OUTER JOIN
		EMPLOYEE E
	ON V.EMP_EMNO = E.EMP_EMNO
	INNER JOIN
		DEPARTMENT D
	ON D.DEPT_CODE = E.DEPT_CODE
	INNER JOIN
		RANK R
	ON R.RANK_CODE = E.RANK_CODE
	INNER JOIN
		RETIREMENT RET
	ON RET.EMP_EMNO = E.EMP_EMNO
	WHERE /* 재직자이거나, baseYear에 퇴직한 사람*/
		((CONVERT(#{baseYear}, UNSIGNED))<![CDATA[ >= ]]>(CONVERT((SELECT LEFT(E.EMP_INCO_DATE,4)), UNSIGNED))) AND
		(RET.RETR_DEL_YN = 'N' OR (CONVERT((SELECT LEFT(RET.RETR_DATE,4)), UNSIGNED)) = (CONVERT(#{baseYear}, UNSIGNED)))
	<if test="seacrchOption == 'empName' and keyword != null and !keyword.equals('')"> #성명 검색
	AND E.EMP_NAME LIKE CONCAT('%',#{keyword},'%')
	</if>
	<if test="seacrchOption == 'empEmno' and keyword != null and !keyword.equals('')"> #사번 검색
	AND E.EMP_EMNO LIKE CONCAT('%',#{keyword},'%')
	</if>
	<if test="seacrchOption == 'deptName' and keyword != null and !keyword.equals('')"> #부서 검색
	AND D.DEPT_NAME LIKE CONCAT('%',#{keyword},'%')
	</if>		
	</select>
	
	<!-- 휴가일수설정 사원등록 Insert -->
	<insert id="vacCntEmpSignUpInsert" parameterType="java.lang.String">
	/* 휴가일수설정 사원등록 저장하기 */
	INSERT INTO
		EMPLOYEE_REMINDING_VAC(
			EMP_EMNO, #사원번호
			BASE_YEAR, #기준년도
			COWY_SERIAL_NUMBER, #근속일련번호
	 		EMRE_VAC_CNT, #연차개수
			EMRE_PVAC_UD, #유급휴가사용일수
			EMRE_UPVAC_UD, #무급휴가사용일수
			EMRE_DEL_YN #삭제여부
		)
	VALUES(
		#{empEmno},
		(SELECT LEFT(NOW(),4)),
		(SELECT (TRUNCATE(((TO_DAYS(CONCAT(LEFT(NOW(),4),SUBSTRING(NOW(),6,2),SUBSTRING(NOW(),9,2))) - TO_DAYS(EMP_INCO_DATE))/365),0)+1) FROM EMPLOYEE WHERE EMP_EMNO = #{empEmno}),
		0,
		0,
		0,
		'N'
	);
	</insert>

	<!-- 휴가 신청하기 -->
	<insert id="vacationRequest" parameterType="HashMap">
	/* vacationRequest Insert(휴가 신청) */
	
	INSERT INTO VAC_STATEMENT
	(
		EMP_EMNO,					#사원번호
		ATTENDANCE_C,				#근태코드
		VAST_C,						#휴가코드
		VAST_CRT_DATE,				#휴가신청일자
		VAST_START_DATE,			#휴가시작날짜
		VAST_END_DATE,				#휴가종료날짜
		VAST_VAC_UD,				#휴가일수
		VAST_CONT,					#휴가사유
		VAST_PROGRESS_SITUATION, 		#전자결재상태
		VAST_DEL_YN					#삭제여부
	) VALUES (
		#{empEmno},					#사원번호
		'W6',						#근태코드
		#{vastC},					#휴가코드
		(SELECT REPLACE(#{vastCrtDate},'-','')),		#휴가신청일자(날짜표기문자열,바꿀문자,바껴서보여줄문자)
		(SELECT REPLACE(#{vastStartDate},'-','')),		#휴가시작날짜
		(SELECT REPLACE(#{vastEndDate},'-','')),		#휴가종료날짜
		#{vastVacUd},									#휴가일수
		#{vastCont},									#휴가사유
		#{vastProgressSituation},		
		'N'												#삭제여부
	)
	</insert>
	
		
	<!-- 휴가 조회하기 - 직원 -->
	
	<!-- 휴가 조회하기 - 관리자 -->
	<select id="vacationListAdmin" parameterType="HashMap" resultType="HashMap">
	/* vacationListAdmin Select(휴가 조회-관리자) */
	SELECT 
		EMP_EMNO,					#사원번호
		ATTENDANCE_C,				#근태코드
		VAST_C,						#휴가코드
		VAST_CRT_DATE,				#휴가신청일자
		VAST_START_DATE,			#휴가시작날짜
		VAST_END_DATE,				#휴가종료날짜
		VAST_VAC_UD,				#휴가일수
		VAST_CONT,					#휴가사유
		VAST_PROGRESS_SITUATION, 		#전자결재상태
		VAST_DEL_YN					#삭제여부	
	FROM VAC_STATEMENT
	</select>

	<!-- 휴가 신청현황 - 승인대기 개수 -->
	<select id="vacationProgCntNum" resultType="java.lang.Integer">
	/* vacationProgCntNum (휴가 승인대기 개수 - 관리자) */
	
	SELECT 
		COUNT(VAST_PROGRESS_SITUATION) AS progCntNum 
	FROM VAC_STATEMENT
	WHERE VAST_PROGRESS_SITUATION = '승인대기';
	
	</select>
	
	
	<!-- 휴가 신청현황 - 승인대기 리스트 -->
	<select id="vacationProgressList" parameterType="HashMap" resultType="HashMap">
	SELECT
		VS.VAST_SERIAL_NUMBER as vastSerialNumber,		#휴가현황일련번호
		VS.EMP_EMNO AS empEmno,		#사원번호
		EMP.EMP_NAME AS empName,	#사원이름
		DEP.DEPT_NAME AS deptName,	#부서명
		RAN.RANK_NAME AS rankName,	#직급
		VS.VAST_CRT_DATE AS vastCrtDate,	#휴가신청날짜
		VAC.VAST_TYPE AS vastType,			#휴가명
		VS.VAST_START_DATE AS vastStartDate,	#휴가시작날짜
		VS.VAST_END_DATE AS vastEndDate,		#휴가종료날짜
		VS.VAST_VAC_UD AS vastVacUd,			#휴가사용개수
		VS.VAST_CONT AS vastCont,			#휴가사유
		VS.VAST_PROGRESS_SITUATION AS vastProgressSituation		#휴가결재상황	
	FROM VAC_STATEMENT VS, VACATION VAC, EMPLOYEE EMP, DEPARTMENT DEP, RANK RAN
	WHERE VS.VAST_C = VAC.VAST_C
	AND VS.EMP_EMNO = EMP.EMP_EMNO
	AND RAN.DEPT_CODE = DEP.DEPT_CODE
	</select>
	
	
	<!-- 휴가  '승인대기' -> '승인완료' -->
	<update id="vacationProgToggle" parameterType="HashMap">
	UPDATE VAC_STATEMENT 
	SET VAST_PROGRESS_SITUATION='승인완료' 
	WHERE VAST_PROGRESS_SITUATION='승인대기'
	AND VAST_SERIAL_NUMBER = #{vastSerialNumber}
	</update>
	
	
	
	<!-- 휴가 개수 계산하기 -->
	
	<!-- 휴가 월마감 -->	


</mapper>